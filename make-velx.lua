local roll_files = {
	["=make-velx/lzss.lua"] = "--[[----------------------------------------------------------------------------\n	LZSS - encoder / decoder\n	This is free and unencumbered software released into the public domain.\n	Anyone is free to copy, modify, publish, use, compile, sell, or\n	distribute this software, either in source code form or as a compiled\n	binary, for any purpose, commercial or non-commercial, and by any\n	means.\n	In jurisdictions that recognize copyright laws, the author or authors\n	of this software dedicate any and all copyright interest in the\n	software to the public domain. We make this dedication for the benefit\n	of the public at large and to the detriment of our heirs and\n	successors. We intend this dedication to be an overt act of\n	relinquishment in perpetuity of all present and future rights to this\n	software under copyright law.\n	THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n	MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n	IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n	OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n	OTHER DEALINGS IN THE SOFTWARE.\n	For more information, please refer to <http://unlicense.org/>\n--]]----------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nlocal M = {}\nlocal string, table = string, table\n\n--------------------------------------------------------------------------------\nlocal POS_BITS = 12\nlocal LEN_BITS = 16 - POS_BITS\nlocal POS_SIZE = 1 << POS_BITS\nlocal LEN_SIZE = 1 << LEN_BITS\nlocal LEN_MIN = 3\n\n--------------------------------------------------------------------------------\nfunction M.compress(input)\n	local offset, output = 1, {}\n	local window = ''\n\n	local function search()\n		for i = LEN_SIZE + LEN_MIN - 1, LEN_MIN, -1 do\n			local str = string.sub(input, offset, offset + i - 1)\n			local pos = string.find(window, str, 1, true)\n			if pos then\n				return pos, str\n			end\n		end\n	end\n\n	while offset <= #input do\n		local flags, buffer = 0, {}\n\n		for i = 0, 7 do\n			if offset <= #input then\n				local pos, str = search()\n				if pos and #str >= LEN_MIN then\n					local tmp = ((pos - 1) << LEN_BITS) | (#str - LEN_MIN)\n					buffer[#buffer + 1] = string.pack('>I2', tmp)\n				else\n					flags = flags | (1 << i)\n					str = string.sub(input, offset, offset)\n					buffer[#buffer + 1] = str\n				end\n				window = string.sub(window .. str, -POS_SIZE)\n				offset = offset + #str\n			else\n				break\n			end\n		end\n\n		if #buffer > 0 then\n			output[#output + 1] = string.char(flags)\n			output[#output + 1] = table.concat(buffer)\n		end\n	end\n\n	return table.concat(output)\nend\n\n--------------------------------------------------------------------------------\nfunction M.decompress(input)\n	local offset, output = 1, {}\n	local window = ''\n\n	while offset <= #input do\n		local flags = string.byte(input, offset)\n		offset = offset + 1\n\n		for i = 1, 8 do\n			local str = nil\n			if (flags & 1) ~= 0 then\n				if offset <= #input then\n					str = string.sub(input, offset, offset)\n					offset = offset + 1\n				end\n			else\n				if offset + 1 <= #input then\n					local tmp = string.unpack('>I2', input, offset)\n					offset = offset + 2\n					local pos = (tmp >> LEN_BITS) + 1\n					local len = (tmp & (LEN_SIZE - 1)) + LEN_MIN\n					str = string.sub(window, pos, pos + len - 1)\n				end\n			end\n			flags = flags >> 1\n			if str then\n				output[#output + 1] = str\n				window = string.sub(window .. str, -POS_SIZE)\n			end\n		end\n	end\n\n	return table.concat(output)\nend\nreturn M",
	["=make-velx/init.lua"] = "local parser = require(\"argparse\")(\"make-velx\")\nlocal lfs = require(\"lfs\")\nlocal lzss = require(\"lzss\")\nlocal packstr = \"<c5BBBBc4I3I3I3I4\"\n\nparser:argument(\"code\", \"Code for the main section\")\nparser:option(\"-A --archive\", \"Path to archive\")\nparser:option(\"--archive-type\", \"Archive type.\"):default \"cpio\"\nparser:option(\"--security\", \"Path to security section contents\")\nparser:option(\"--os\", \"Path to OS specific section\")\nparser:option(\"--osid\", \"OS ID\"):default(\"7F\")\nparser:flag(\"-z --compress\", \"Compress code section.\")\nparser:option(\"-O --out\", \"Output file\"):default(\"out.velx\")\nlocal args = parser:parse()\nlocal fout = assert(io.open(args.out, \"wb\"))\n\n--[[\nstruct velx_header {\n    char magic[5];\n    uint8_t file_version;\n    uint8_t compression;\n    uint8_t lua_version;\n    uint8_t os_id;\n    char arctype[4];\n    uint24_t program_size;\n    uint24_t osdep_section;\n    uint24_t signature_size;\n    uint32_t archive_size;\n}\n]]\n\nlocal psize, osize, ssize, asize = lfs.attributes(args.code, \"size\")\nosize = args.os and lfs.attributes(args.os, \"size\") or 0\nssize = args.security and lfs.attributes(args.security, \"size\") or 0\nasize = args.archive and lfs.attributes(args.archive, \"size\") or 0\nfout:write(packstr:pack(\"\\27VelX\", 1, args.compress and 1, 0x53, tonumber(args.osid, 16), args.archive and args.archive_type or \"\", psize, osize, ssize, asize))\nlocal function copy_file(path, compress)\n    if not path then return end\n    local h = assert(io.open(path, \"rb\"))\n    local d = h:read \"*a\"\n    if compress then\n        d = lzss.compress(d)\n    end\n    fout:write(d)\n    h:close()\nend\ncopy_file(args.code, args.compress)\ncopy_file(args.os)\ncopy_file(args.security)\ncopy_file(args.archive)\nfout:close()",
}
local roll = {
	["lzss"] = "=make-velx/lzss.lua",
	["init"] = "=make-velx/init.lua",
}
local function lzss_decompress(a)return a end
table.insert(package.searchers, 1, function(pkg)
if not roll[pkg] then return string.format("no field roll[\"%s\"]", pkg) end
return load(lzss_decompress(roll_files[roll[pkg]]), roll[pkg])
end)
return require("init")
